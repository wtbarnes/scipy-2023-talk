---
title: "Seeing the Sun through the Clouds: Accelerating the SunPy Data Analysis Ecosystem with Dask"
subtitle: SciPy / Austin, TX / 12 July 2023
authors:
- Will Barnes
- Nabil Freij
- Jack Ireland
- Stuart Mumford
institute:
- AU/NASA GSFC
- BAERI/LMSAL
- NASA GSFC
- Aperio Software
format:
  revealjs:
    margin: 0
    width: 100%
    height: 100%
    theme: [default, theme/sunpy-theme.scss]
    logo: static/sunpy_logo_landscape.svg
    footer: "[wtbarnes.github.io/scipy-2023-talk](https://wtbarnes.github.io/scipy-2023-talk)"
title-slide-attributes: 
  data-background-image: static/sunpy_icon.svg
  data-background-position: -100% 50%
  data-background-opacity: 50%
  data-background-size: 80%
code-annotations: below
---

# <span style="color:white;">What is solar physics?</span> {background-video="https://svs.gsfc.nasa.gov/vis/a030000/a030000/a030072/heliophysics_fleet_capture_erup_cme_1280x720.mp4" background-video-loop="true" background-video-muted="true"}

# {background-image="static/corona_image.png"}

::: footer
Image Credit: [NASA APOD/Reinhold Wittich](https://apod.nasa.gov/apod/ap230516.html)
:::

## Why is the Corona So Hot?

::: {.notes}
- Show 1600 √Ö and 171 √Ö images
- Denote corresponding temperatures
- Note that temperature increases from surface to corona
:::

# { background-video="https://api.helioviewer.org/cache/movies/2023/07/10/1SDn5/2018_05_29_00_07_33_2018_05_30_00_02_45_AIA_171.mp4" background-video-loop="true" background-video-muted="true"}

# { background-video="https://api.helioviewer.org/cache/movies/2023/07/10/WSDn5/2018_05_29_00_07_34_2018_05_30_00_02_58_AIA_211.mp4" background-video-loop="true" background-video-muted="true"}

::: {.notes}
:::

## Solar Physics in Python with `sunpy`!

*‚ÄúThe community-developed, free and open-source solar data analysis environment for Python.‚Äù*

::: {.r-stack}
![](static/tour.svg){.fragment fig-align="center" width=1750}

![](static/astropy_logo.png){.fragment fig-align="center" width=300}
:::

::: {.notes}
- Intro to project
- Built on Astropy
- Brief history
- Add overlay of astropy logo
:::

## The SunPy Project

::: {layout="[[1], [-1], [-1]]"}
![](static/sunpy_ecosystem.svg){fig-align="center" width=1300}
:::

::: {.notes}
- Affiliated packages summary
- For working with specific instruments or doing specific analyses
- Interoperable ecosystem
- [sunpy.org/affiliated](https://sunpy.org/affiliated)
:::

## Searching for Data with `sunpy`

```{python}
import os
import glob
os.environ["PARFIVE_HIDE_PROGRESS"] = "True"
```

```{python}
#| echo: true
#| output-location: column-fragment
from sunpy.net import Fido, attrs as a
import astropy.units as u

query = Fido.search(                                 # <1>
  a.Time('2018-05-29 18:00', '2018-05-29 18:00:10'), # <1>
  a.Wavelength(171*u.angstrom),                      # <1>
  a.Instrument.aia                                   # <1>
)                                                    # <1> 
print(query)
```
1. Search remote repository for AIA 171 √Ö images between 18:00 and 18:10 on May 29 2018.

```{python}
#| echo: true
#| output-location: column-fragment
files = Fido.fetch(query, path='data/{instrument}') # <2>
print(files)
```
2. Download all FITS files corresponding to this search result to `data/AIA`.

## Loading Data with `sunpy`

```{python}
if len(files) == 0:
  files = glob.glob('data/AIA/*.fits')
```

```{python}
#| echo: true
#| output-location: fragment
#| fig-align: center
import sunpy.map

m = sunpy.map.Map(files)
m.peek()
```

## Inspecting Data with `sunpy`

```{python}
#| echo: true
#| output-location: column-fragment
print(m.detector)
print(m.wavelength)
print(m.date)
print(m.observer_coordinate)
```

```{python}
#| echo: true
#| output-location: column-fragment
from astropy.coordinates import SkyCoord

corner = SkyCoord(Tx=-375*u.arcsec, Ty=0*u.arcsec,
                  frame=m.coordinate_frame)
print(m.world_to_pixel(corner))
m_cutout = m.submap(corner,
                    width=500*u.arcsec,
                    height=500*u.arcsec)
m_cutout.peek()
```

## Transforming Data with `sunpy`

```{python}
```

::: {.notes}
Show something here about how we need to correct for rotation of the Sun, observers at different location/different coordinate systems
:::

## Challenging at Scale

::: {.incremental}
- Analyzing time-dynamics of plasma requires many files 
  - Delivering and downloading many individual files to users is difficult
  - $12\,\mathrm{h}/12\,\mathrm{s}\times6=21,600$ files
- Instantiating many rich `Map` objects is difficult
  - $\approx130$ MB per file, $\approx3$ TB per dataset
  - Even analyzing a subset of the data requires loading the whole image
- Lots of processing required to align and stack images into "data cubes"
  - Large computing burden placed on user
  - Physical constraints make "analysis-ready" data products challenging
- Trade-off between exploratory data analysis and "batch processing"
:::

## HelioCloud--Science Platform for Heliophysics

::: {.columns}
::: {.column width="55%"}
- NASA-funded **common data analysis environment for heliophysics** on AWS
- Aligns with NASA **Transform to Open Science (TOPS)** initiative 
- **Jupyter Lab** interface + custom VM instances
- ~1 Pb of heliophysics data in S3 storage--data and compute are **colocated**
- Open to NASA scientists + collaborators--**no NASA credentials needed**
- **Dask Gateway** for easy cluster provisioning
:::
::: {.column width="45%"}
:::{layout="[[100],[33,33,33]]"}
![](static/heliocloud_logo.png)

![](static/jupyter_logo.png)

![](static/dask_logo.svg)

![](static/sunpy_icon.svg)
:::
:::
:::

# Live Demo ü§û {background-image="static/sunpy_icon.svg" background-opacity="50%"}

## Some painpoints remain...

- Making a Dask array from a FITS array lazily is still hard
- Awkward interface between "Dask aware" operations and custom functions implemented using lower-level Dask operations
- Incompatibility between xarray and WCS approaches to coordinates systems
- Incompatibility between astropy units and Dask, i.e. cannot have a `Quantity` backed by a Dask array

## Summary

